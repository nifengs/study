一、数据类型
typeof 检测数据类型
字符串
空格也是位数，charAt()选择字符串中的位数


显式类型转换（强制类型转换）：
Number()
parseInt()
parseFloat()

隐式类型转换：
	+								200 + '3'		变成字符串
	- * / %				'200' - 3     变成数字
	++ --						变成数字
	> < 						数字的比较 、字符串的比较
	!	取反					把右边的数据类型转成布尔值
	==

 NaN：not a number 不是个 数字 的 数字类型
isNaN：Is not a number 是不是不是一个数字（不是数字）
NaN是false
NaN与自己不相等
isNaN();不是数字	 不是数字 true			是数字false
// 判断某些值是不是数字
// 不喜欢数字、讨厌数字
内部主要还是依靠Number() 比如说alert(isNaN('250')) Number()会将'250'转化为250 对于isNaN 则为false;
HTML 中拿到的内容，类型都是字符串
二、函数

/*
	重用代码：
		1、尽量保证 HTML 代码结构一致，可以通过父级选取子元素
		2、把核心主程序实现，用函数包起来
		3、把每组里不同的值找出来，通过传参实现
*/
作用域

	script		全局变量、全局函数
		自上而下

	函数
		由里到外

	{}
	浏览器：
		“JS解析器”
			 alert(a);					// function a (){ alert(4); }
            var a = 1;
            alert(a);					// 1
            function a (){ alert(2); }
            alert(a);					// 1
            var a = 3;
            alert(a);					// 3
            function a (){ alert(4); }
            alert(a);					// 3
			1）“先找一些东西”	：var  function 参数

							a = ...
									所有的变量，在正式运行代码之前，都提前赋了一个值：未定义
							fn1 = function fn1(){ alert(2); }
									所有的函数，在正式运行代码之前，都是整个函数块

							JS 的预解析

						遇到重名的：只留一个
							变量和函数重名了，就只留下函数
			2）逐行解读代码：
						表达式：= + - * / % ++ -- ! 参数……
						表达式可以修改预解析的值！

/*
	真假的问题：数据类型-数字（NaN）、字符串、布尔、函数、对象（elem、[]、{}、null）、未定义
	真：非0的数字、非空字符串、true、函数、能找到的元素、[]、{}
	假：0、NaN、空字符串''、false、不能找到的元素、null、未定义
*/
if( null ){
	alert('真');
}else{
	alert('假');
当函数的参数个数无法确定的时候：用 arguments
